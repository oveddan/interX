/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Add,
  AddInterface,
  Int2Out1SocketIndecesStruct,
} from "../../../contracts/Nodes.sol/Add";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "input1",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "input2",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "result",
            type: "uint8",
          },
        ],
        internalType: "struct Int2Out1SocketIndeces",
        name: "socketIndeces",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IBehaviorGraph",
        name: "_behaviorGraph",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_nodeId",
        type: "uint16",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610715380380610715833981810160405281019061003291906101dd565b806000808201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff1602179055509050505061020a565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100fd826100b4565b810181811067ffffffffffffffff8211171561011c5761011b6100c5565b5b80604052505050565b600061012f6100a0565b905061013b82826100f4565b919050565b600060ff82169050919050565b61015681610140565b811461016157600080fd5b50565b6000815190506101738161014d565b92915050565b60006060828403121561018f5761018e6100af565b5b6101996060610125565b905060006101a984828501610164565b60008301525060206101bd84828501610164565b60208301525060406101d184828501610164565b60408301525092915050565b6000606082840312156101f3576101f26100aa565b5b600061020184828501610179565b91505092915050565b6104fc806102196000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639464805014610030575b600080fd5b61004a600480360381019061004591906102c6565b61004c565b005b60008273ffffffffffffffffffffffffffffffffffffffff16631225974f836000800160019054906101000a900460ff166040518363ffffffff1660e01b815260040161009a929190610331565b60206040518083038186803b1580156100b257600080fd5b505afa1580156100c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ea9190610390565b8373ffffffffffffffffffffffffffffffffffffffff16631225974f846000800160009054906101000a900460ff166040518363ffffffff1660e01b8152600401610136929190610331565b60206040518083038186803b15801561014e57600080fd5b505afa158015610162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101869190610390565b61019091906103ec565b90508273ffffffffffffffffffffffffffffffffffffffff16638a8f7e27836000800160029054906101000a900460ff16846040518463ffffffff1660e01b81526004016101e09392919061048f565b600060405180830381600087803b1580156101fa57600080fd5b505af115801561020e573d6000803e3d6000fd5b50505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102478261021c565b9050919050565b60006102598261023c565b9050919050565b6102698161024e565b811461027457600080fd5b50565b60008135905061028681610260565b92915050565b600061ffff82169050919050565b6102a38161028c565b81146102ae57600080fd5b50565b6000813590506102c08161029a565b92915050565b600080604083850312156102dd576102dc610217565b5b60006102eb85828601610277565b92505060206102fc858286016102b1565b9150509250929050565b61030f8161028c565b82525050565b600060ff82169050919050565b61032b81610315565b82525050565b60006040820190506103466000830185610306565b6103536020830184610322565b9392505050565b6000819050919050565b61036d8161035a565b811461037857600080fd5b50565b60008151905061038a81610364565b92915050565b6000602082840312156103a6576103a5610217565b5b60006103b48482850161037b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103f78261035a565b91506104028361035a565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561043d5761043c6103bd565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610475576104746103bd565b5b828201905092915050565b6104898161035a565b82525050565b60006060820190506104a46000830186610306565b6104b16020830185610322565b6104be6040830184610480565b94935050505056fea264697066735822122077c0369686cd5c35ba13192bad672bdffa4d598684e9a5d20d618647a2a8c88464736f6c63430008090033";

type AddConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Add__factory extends ContractFactory {
  constructor(...args: AddConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    socketIndeces: Int2Out1SocketIndecesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Add> {
    return super.deploy(socketIndeces, overrides || {}) as Promise<Add>;
  }
  override getDeployTransaction(
    socketIndeces: Int2Out1SocketIndecesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(socketIndeces, overrides || {});
  }
  override attach(address: string): Add {
    return super.attach(address) as Add;
  }
  override connect(signer: Signer): Add__factory {
    return super.connect(signer) as Add__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddInterface {
    return new utils.Interface(_abi) as AddInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Add {
    return new Contract(address, _abi, signerOrProvider) as Add;
  }
}
