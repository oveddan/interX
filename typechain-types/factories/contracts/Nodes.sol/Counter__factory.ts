/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Counter,
  CounterInterface,
  CounterSocketIndecesStruct,
} from "../../../contracts/Nodes.sol/Counter";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "inputFlow",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "outputCount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "outputFlow",
            type: "uint8",
          },
        ],
        internalType: "struct CounterSocketIndeces",
        name: "socketIndeces",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBehaviorGraph",
        name: "_behaviorGraph",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_nodeId",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "_triggeringSocketIndex",
        type: "uint8",
      },
    ],
    name: "trigger",
    outputs: [
      {
        components: [
          {
            internalType: "enum UpdateType",
            name: "updateType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "variableId",
            type: "uint8",
          },
          {
            internalType: "int256",
            name: "intValue",
            type: "int256",
          },
          {
            internalType: "bool",
            name: "boolValue",
            type: "bool",
          },
        ],
        internalType: "struct GraphUpdate[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d8e38038062000d8e8339818101604052810190620000379190620001fd565b80600160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff160217905550905050506200022f565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200010682620000bb565b810181811067ffffffffffffffff82111715620001285762000127620000cc565b5b80604052505050565b60006200013d620000a7565b90506200014b8282620000fb565b919050565b600060ff82169050919050565b620001688162000150565b81146200017457600080fd5b50565b60008151905062000188816200015d565b92915050565b600060608284031215620001a757620001a6620000b6565b5b620001b3606062000131565b90506000620001c58482850162000177565b6000830152506020620001db8482850162000177565b6020830152506040620001f18482850162000177565b60408301525092915050565b600060608284031215620002165762000215620000b1565b5b600062000226848285016200018e565b91505092915050565b610b4f806200023f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306661abd1461003b578063bc25907114610059575b600080fd5b610043610089565b60405161005091906102df565b60405180910390f35b610073600480360381019061006e91906103f1565b61008f565b6040516100809190610602565b60405180910390f35b60005481565b6060600060018573ffffffffffffffffffffffffffffffffffffffff1663fa5a8beb866040518263ffffffff1660e01b81526004016100ce9190610690565b60206040518083038186803b1580156100e657600080fd5b505afa1580156100fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011e91906106ea565b6101289190610746565b90508473ffffffffffffffffffffffffffffffffffffffff16638eb045ec85836040518363ffffffff1660e01b81526004016101659291906107e9565b600060405180830381600087803b15801561017f57600080fd5b505af1158015610193573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16638a8f7e2785600160000160019054906101000a900460ff16846040518463ffffffff1660e01b81526004016101e693929190610834565b600060405180830381600087803b15801561020057600080fd5b505af1158015610214573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663cbe7486a85600160000160029054906101000a900460ff166040518363ffffffff1660e01b815260040161026592919061086b565b600060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102bc9190610ad0565b9150509392505050565b6000819050919050565b6102d9816102c6565b82525050565b60006020820190506102f460008301846102d0565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103398261030e565b9050919050565b600061034b8261032e565b9050919050565b61035b81610340565b811461036657600080fd5b50565b60008135905061037881610352565b92915050565b600061ffff82169050919050565b6103958161037e565b81146103a057600080fd5b50565b6000813590506103b28161038c565b92915050565b600060ff82169050919050565b6103ce816103b8565b81146103d957600080fd5b50565b6000813590506103eb816103c5565b92915050565b60008060006060848603121561040a57610409610304565b5b600061041886828701610369565b9350506020610429868287016103a3565b925050604061043a868287016103dc565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106104b0576104af610470565b5b50565b60008190506104c18261049f565b919050565b60006104d1826104b3565b9050919050565b6104e1816104c6565b82525050565b6104f0816103b8565b82525050565b6000819050919050565b610509816104f6565b82525050565b60008115159050919050565b6105248161050f565b82525050565b60808201600082015161054060008501826104d8565b50602082015161055360208501826104e7565b5060408201516105666040850182610500565b506060820151610579606085018261051b565b50505050565b600061058b838361052a565b60808301905092915050565b6000602082019050919050565b60006105af82610444565b6105b9818561044f565b93506105c483610460565b8060005b838110156105f55781516105dc888261057f565b97506105e783610597565b9250506001810190506105c8565b5085935050505092915050565b6000602082019050818103600083015261061c81846105a4565b905092915050565b61062d8161037e565b82525050565b600082825260208201905092915050565b7f636f756e74000000000000000000000000000000000000000000000000000000600082015250565b600061067a600583610633565b915061068582610644565b602082019050919050565b60006040820190506106a56000830184610624565b81810360208301526106b68161066d565b905092915050565b6106c7816104f6565b81146106d257600080fd5b50565b6000815190506106e4816106be565b92915050565b600060208284031215610700576106ff610304565b5b600061070e848285016106d5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610751826104f6565b915061075c836104f6565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561079757610796610717565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156107cf576107ce610717565b5b828201905092915050565b6107e3816104f6565b82525050565b60006060820190506107fe6000830185610624565b818103602083015261080f8161066d565b905061081e60408301846107da565b9392505050565b61082e816103b8565b82525050565b60006060820190506108496000830186610624565b6108566020830185610825565b61086360408301846107da565b949350505050565b60006040820190506108806000830185610624565b61088d6020830184610825565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108e282610899565b810181811067ffffffffffffffff82111715610901576109006108aa565b5b80604052505050565b60006109146102fa565b905061092082826108d9565b919050565b600067ffffffffffffffff8211156109405761093f6108aa565b5b602082029050602081019050919050565b600080fd5b600080fd5b6002811061096857600080fd5b50565b60008151905061097a8161095b565b92915050565b60008151905061098f816103c5565b92915050565b61099e8161050f565b81146109a957600080fd5b50565b6000815190506109bb81610995565b92915050565b6000608082840312156109d7576109d6610956565b5b6109e1608061090a565b905060006109f18482850161096b565b6000830152506020610a0584828501610980565b6020830152506040610a19848285016106d5565b6040830152506060610a2d848285016109ac565b60608301525092915050565b6000610a4c610a4784610925565b61090a565b90508083825260208201905060808402830185811115610a6f57610a6e610951565b5b835b81811015610a985780610a8488826109c1565b845260208401935050608081019050610a71565b5050509392505050565b600082601f830112610ab757610ab6610894565b5b8151610ac7848260208601610a39565b91505092915050565b600060208284031215610ae657610ae5610304565b5b600082015167ffffffffffffffff811115610b0457610b03610309565b5b610b1084828501610aa2565b9150509291505056fea26469706673582212200a1d87b6d517631b67fff0039a2bfe6271696d694212c98ab0ba8368ee74f65364736f6c63430008090033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    socketIndeces: CounterSocketIndecesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Counter> {
    return super.deploy(socketIndeces, overrides || {}) as Promise<Counter>;
  }
  override getDeployTransaction(
    socketIndeces: CounterSocketIndecesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(socketIndeces, overrides || {});
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
