/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ExternalInvoke,
  ExternalInvokeInterface,
  ExternalInvokeIndecesStruct,
} from "../../../contracts/Nodes.sol/ExternalInvoke";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "outputFlowSocket",
            type: "uint8",
          },
        ],
        internalType: "struct ExternalInvokeIndeces",
        name: "socketIndeces",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IBehaviorGraph",
        name: "_behaviorGraph",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_nodeId",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "_triggeringSocketIndex",
        type: "uint8",
      },
    ],
    name: "trigger",
    outputs: [
      {
        components: [
          {
            internalType: "enum UpdateType",
            name: "updateType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "variableId",
            type: "uint8",
          },
          {
            internalType: "int256",
            name: "intValue",
            type: "int256",
          },
          {
            internalType: "bool",
            name: "boolValue",
            type: "bool",
          },
        ],
        internalType: "struct GraphUpdate[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161091538038061091583398181016040528101906100329190610173565b806000808201518160000160006101000a81548160ff021916908360ff160217905550905050506101a0565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100bb82610072565b810181811067ffffffffffffffff821117156100da576100d9610083565b5b80604052505050565b60006100ed61005e565b90506100f982826100b2565b919050565b600060ff82169050919050565b610114816100fe565b811461011f57600080fd5b50565b6000815190506101318161010b565b92915050565b60006020828403121561014d5761014c61006d565b5b61015760206100e3565b9050600061016784828501610122565b60008301525092915050565b60006020828403121561018957610188610068565b5b600061019784828501610137565b91505092915050565b610766806101af6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc25907114610030575b600080fd5b61004a60048036038101906100459190610205565b610060565b6040516100579190610416565b60405180910390f35b60608373ffffffffffffffffffffffffffffffffffffffff1663cbe7486a846000800160009054906101000a900460ff166040518363ffffffff1660e01b81526004016100ae929190610456565b600060405180830381600087803b1580156100c857600080fd5b505af11580156100dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061010591906106e7565b90509392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014d82610122565b9050919050565b600061015f82610142565b9050919050565b61016f81610154565b811461017a57600080fd5b50565b60008135905061018c81610166565b92915050565b600061ffff82169050919050565b6101a981610192565b81146101b457600080fd5b50565b6000813590506101c6816101a0565b92915050565b600060ff82169050919050565b6101e2816101cc565b81146101ed57600080fd5b50565b6000813590506101ff816101d9565b92915050565b60008060006060848603121561021e5761021d610118565b5b600061022c8682870161017d565b935050602061023d868287016101b7565b925050604061024e868287016101f0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106102c4576102c3610284565b5b50565b60008190506102d5826102b3565b919050565b60006102e5826102c7565b9050919050565b6102f5816102da565b82525050565b610304816101cc565b82525050565b6000819050919050565b61031d8161030a565b82525050565b60008115159050919050565b61033881610323565b82525050565b60808201600082015161035460008501826102ec565b50602082015161036760208501826102fb565b50604082015161037a6040850182610314565b50606082015161038d606085018261032f565b50505050565b600061039f838361033e565b60808301905092915050565b6000602082019050919050565b60006103c382610258565b6103cd8185610263565b93506103d883610274565b8060005b838110156104095781516103f08882610393565b97506103fb836103ab565b9250506001810190506103dc565b5085935050505092915050565b6000602082019050818103600083015261043081846103b8565b905092915050565b61044181610192565b82525050565b610450816101cc565b82525050565b600060408201905061046b6000830185610438565b6104786020830184610447565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104cd82610484565b810181811067ffffffffffffffff821117156104ec576104eb610495565b5b80604052505050565b60006104ff61010e565b905061050b82826104c4565b919050565b600067ffffffffffffffff82111561052b5761052a610495565b5b602082029050602081019050919050565b600080fd5b600080fd5b6002811061055357600080fd5b50565b60008151905061056581610546565b92915050565b60008151905061057a816101d9565b92915050565b6105898161030a565b811461059457600080fd5b50565b6000815190506105a681610580565b92915050565b6105b581610323565b81146105c057600080fd5b50565b6000815190506105d2816105ac565b92915050565b6000608082840312156105ee576105ed610541565b5b6105f860806104f5565b9050600061060884828501610556565b600083015250602061061c8482850161056b565b602083015250604061063084828501610597565b6040830152506060610644848285016105c3565b60608301525092915050565b600061066361065e84610510565b6104f5565b905080838252602082019050608084028301858111156106865761068561053c565b5b835b818110156106af578061069b88826105d8565b845260208401935050608081019050610688565b5050509392505050565b600082601f8301126106ce576106cd61047f565b5b81516106de848260208601610650565b91505092915050565b6000602082840312156106fd576106fc610118565b5b600082015167ffffffffffffffff81111561071b5761071a61011d565b5b610727848285016106b9565b9150509291505056fea2646970667358221220352ab238b56ecb6e9262a59c94e454ac4d4a85d4dc50ad9c3bff027725ef86e664736f6c63430008090033";

type ExternalInvokeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExternalInvokeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExternalInvoke__factory extends ContractFactory {
  constructor(...args: ExternalInvokeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    socketIndeces: ExternalInvokeIndecesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExternalInvoke> {
    return super.deploy(
      socketIndeces,
      overrides || {}
    ) as Promise<ExternalInvoke>;
  }
  override getDeployTransaction(
    socketIndeces: ExternalInvokeIndecesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(socketIndeces, overrides || {});
  }
  override attach(address: string): ExternalInvoke {
    return super.attach(address) as ExternalInvoke;
  }
  override connect(signer: Signer): ExternalInvoke__factory {
    return super.connect(signer) as ExternalInvoke__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExternalInvokeInterface {
    return new utils.Interface(_abi) as ExternalInvokeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExternalInvoke {
    return new Contract(address, _abi, signerOrProvider) as ExternalInvoke;
  }
}
