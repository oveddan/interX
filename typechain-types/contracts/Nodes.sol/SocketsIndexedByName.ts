/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ExternalInvokeIndecesStruct = {
  outputFlowSocket: PromiseOrValue<BigNumberish>;
};

export type ExternalInvokeIndecesStructOutput = [number] & {
  outputFlowSocket: number;
};

export type CounterSocketIndecesStruct = {
  inputFlow: PromiseOrValue<BigNumberish>;
  outputCount: PromiseOrValue<BigNumberish>;
  outputFlow: PromiseOrValue<BigNumberish>;
};

export type CounterSocketIndecesStructOutput = [number, number, number] & {
  inputFlow: number;
  outputCount: number;
  outputFlow: number;
};

export type Int2Out1SocketIndecesStruct = {
  input1: PromiseOrValue<BigNumberish>;
  input2: PromiseOrValue<BigNumberish>;
  result: PromiseOrValue<BigNumberish>;
};

export type Int2Out1SocketIndecesStructOutput = [number, number, number] & {
  input1: number;
  input2: number;
  result: number;
};

export type VariableSetIndecesStruct = {
  inputFlow: PromiseOrValue<BigNumberish>;
  inputVal: PromiseOrValue<BigNumberish>;
};

export type VariableSetIndecesStructOutput = [number, number] & {
  inputFlow: number;
  inputVal: number;
};

export type GateSocketIndecesStruct = {
  inputFlow: PromiseOrValue<BigNumberish>;
  outputGateTrue: PromiseOrValue<BigNumberish>;
  outputGateFalse: PromiseOrValue<BigNumberish>;
};

export type GateSocketIndecesStructOutput = [number, number, number] & {
  inputFlow: number;
  outputGateTrue: number;
  outputGateFalse: number;
};

export type SocketIndecesByNodeTypeStruct = {
  externalInvoke: ExternalInvokeIndecesStruct;
  counter: CounterSocketIndecesStruct;
  add: Int2Out1SocketIndecesStruct;
  variableSet: VariableSetIndecesStruct;
  gate: GateSocketIndecesStruct;
};

export type SocketIndecesByNodeTypeStructOutput = [
  ExternalInvokeIndecesStructOutput,
  CounterSocketIndecesStructOutput,
  Int2Out1SocketIndecesStructOutput,
  VariableSetIndecesStructOutput,
  GateSocketIndecesStructOutput
] & {
  externalInvoke: ExternalInvokeIndecesStructOutput;
  counter: CounterSocketIndecesStructOutput;
  add: Int2Out1SocketIndecesStructOutput;
  variableSet: VariableSetIndecesStructOutput;
  gate: GateSocketIndecesStructOutput;
};

export interface SocketsIndexedByNameInterface extends utils.Interface {
  functions: {
    "getSocketIndecesByNodeType()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getSocketIndecesByNodeType"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSocketIndecesByNodeType",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getSocketIndecesByNodeType",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SocketsIndexedByName extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocketsIndexedByNameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSocketIndecesByNodeType(
      overrides?: CallOverrides
    ): Promise<[SocketIndecesByNodeTypeStructOutput]>;
  };

  getSocketIndecesByNodeType(
    overrides?: CallOverrides
  ): Promise<SocketIndecesByNodeTypeStructOutput>;

  callStatic: {
    getSocketIndecesByNodeType(
      overrides?: CallOverrides
    ): Promise<SocketIndecesByNodeTypeStructOutput>;
  };

  filters: {};

  estimateGas: {
    getSocketIndecesByNodeType(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getSocketIndecesByNodeType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
