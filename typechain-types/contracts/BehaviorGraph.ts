/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type NodeDefinitionStruct = {
  id: PromiseOrValue<string>;
  nodeType: PromiseOrValue<BigNumberish>;
  defined: PromiseOrValue<boolean>;
  inputValueType: PromiseOrValue<BigNumberish>;
};

export type NodeDefinitionStructOutput = [string, number, boolean, number] & {
  id: string;
  nodeType: number;
  defined: boolean;
  inputValueType: number;
};

export type BooleanValueAndLabelStruct = {
  value: PromiseOrValue<boolean>;
  socket: PromiseOrValue<BigNumberish>;
};

export type BooleanValueAndLabelStructOutput = [boolean, number] & {
  value: boolean;
  socket: number;
};

export type IntValueAndLabelStruct = {
  value: PromiseOrValue<BigNumberish>;
  socket: PromiseOrValue<BigNumberish>;
};

export type IntValueAndLabelStructOutput = [BigNumber, number] & {
  value: BigNumber;
  socket: number;
};

export type StringValueAndLabelStruct = {
  value: PromiseOrValue<string>;
  socket: PromiseOrValue<BigNumberish>;
};

export type StringValueAndLabelStructOutput = [string, number] & {
  value: string;
  socket: number;
};

export type InitialValuesStruct = {
  booleans: BooleanValueAndLabelStruct[];
  integers: IntValueAndLabelStruct[];
  strings: StringValueAndLabelStruct[];
};

export type InitialValuesStructOutput = [
  BooleanValueAndLabelStructOutput[],
  IntValueAndLabelStructOutput[],
  StringValueAndLabelStructOutput[]
] & {
  booleans: BooleanValueAndLabelStructOutput[];
  integers: IntValueAndLabelStructOutput[];
  strings: StringValueAndLabelStructOutput[];
};

export type NodeConfigStruct = {
  variableId: PromiseOrValue<BigNumberish>;
  invocationId: PromiseOrValue<BigNumberish>;
  invocationNameDefined: PromiseOrValue<boolean>;
  variableIdDefined: PromiseOrValue<boolean>;
};

export type NodeConfigStructOutput = [number, number, boolean, boolean] & {
  variableId: number;
  invocationId: number;
  invocationNameDefined: boolean;
  variableIdDefined: boolean;
};

export type NodeDefinitionAndValuesStruct = {
  definition: NodeDefinitionStruct;
  initialValues: InitialValuesStruct;
  config: NodeConfigStruct;
};

export type NodeDefinitionAndValuesStructOutput = [
  NodeDefinitionStructOutput,
  InitialValuesStructOutput,
  NodeConfigStructOutput
] & {
  definition: NodeDefinitionStructOutput;
  initialValues: InitialValuesStructOutput;
  config: NodeConfigStructOutput;
};

export type EdgeDefinitionStruct = {
  fromNode: PromiseOrValue<string>;
  toNode: PromiseOrValue<string>;
  fromSocket: PromiseOrValue<BigNumberish>;
  toSocket: PromiseOrValue<BigNumberish>;
};

export type EdgeDefinitionStructOutput = [string, string, number, number] & {
  fromNode: string;
  toNode: string;
  fromSocket: number;
  toSocket: number;
};

export type ExternalInvokeIndecesStruct = {
  outputFlowSocket: PromiseOrValue<BigNumberish>;
};

export type ExternalInvokeIndecesStructOutput = [number] & {
  outputFlowSocket: number;
};

export type CounterSocketIndecesStruct = {
  inputFlow: PromiseOrValue<BigNumberish>;
  outputCount: PromiseOrValue<BigNumberish>;
  outputFlow: PromiseOrValue<BigNumberish>;
};

export type CounterSocketIndecesStructOutput = [number, number, number] & {
  inputFlow: number;
  outputCount: number;
  outputFlow: number;
};

export type Int2Out1SocketIndecesStruct = {
  input1: PromiseOrValue<BigNumberish>;
  input2: PromiseOrValue<BigNumberish>;
  result: PromiseOrValue<BigNumberish>;
};

export type Int2Out1SocketIndecesStructOutput = [number, number, number] & {
  input1: number;
  input2: number;
  result: number;
};

export type VariableSetIndecesStruct = {
  inputFlow: PromiseOrValue<BigNumberish>;
  inputVal: PromiseOrValue<BigNumberish>;
  variableName: PromiseOrValue<BigNumberish>;
};

export type VariableSetIndecesStructOutput = [number, number, number] & {
  inputFlow: number;
  inputVal: number;
  variableName: number;
};

export type GateSocketIndecesStruct = {
  inputFlow: PromiseOrValue<BigNumberish>;
  outputGateTrue: PromiseOrValue<BigNumberish>;
  outputGateFalse: PromiseOrValue<BigNumberish>;
};

export type GateSocketIndecesStructOutput = [number, number, number] & {
  inputFlow: number;
  outputGateTrue: number;
  outputGateFalse: number;
};

export type SocketIndecesByNodeTypeStruct = {
  externalInvoke: ExternalInvokeIndecesStruct;
  counter: CounterSocketIndecesStruct;
  add: Int2Out1SocketIndecesStruct;
  variableSet: VariableSetIndecesStruct;
  gate: GateSocketIndecesStruct;
};

export type SocketIndecesByNodeTypeStructOutput = [
  ExternalInvokeIndecesStructOutput,
  CounterSocketIndecesStructOutput,
  Int2Out1SocketIndecesStructOutput,
  VariableSetIndecesStructOutput,
  GateSocketIndecesStructOutput
] & {
  externalInvoke: ExternalInvokeIndecesStructOutput;
  counter: CounterSocketIndecesStructOutput;
  add: Int2Out1SocketIndecesStructOutput;
  variableSet: VariableSetIndecesStructOutput;
  gate: GateSocketIndecesStructOutput;
};

export type GraphUpdateStruct = {
  updateType: PromiseOrValue<BigNumberish>;
  variableId: PromiseOrValue<BigNumberish>;
  intValue: PromiseOrValue<BigNumberish>;
  boolValue: PromiseOrValue<boolean>;
};

export type GraphUpdateStructOutput = [number, number, BigNumber, boolean] & {
  updateType: number;
  variableId: number;
  intValue: BigNumber;
  boolValue: boolean;
};

export interface BehaviorGraphInterface extends utils.Interface {
  functions: {
    "getBoolInputVal(uint16,uint8)": FunctionFragment;
    "getInputValueType(uint16)": FunctionFragment;
    "getIntInputVal(uint16,uint8)": FunctionFragment;
    "getNodeStateVal(uint16,string)": FunctionFragment;
    "getStringInputVal(uint16,uint8)": FunctionFragment;
    "invoke(uint8)": FunctionFragment;
    "setNodeIntStateVal(uint16,string,int256)": FunctionFragment;
    "setVariable(uint8,bool)": FunctionFragment;
    "setVariable(uint8,int256)": FunctionFragment;
    "triggerEdge(uint16,uint8)": FunctionFragment;
    "writeToOutput(uint16,uint8,int256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBoolInputVal"
      | "getInputValueType"
      | "getIntInputVal"
      | "getNodeStateVal"
      | "getStringInputVal"
      | "invoke"
      | "setNodeIntStateVal"
      | "setVariable(uint8,bool)"
      | "setVariable(uint8,int256)"
      | "triggerEdge"
      | "writeToOutput"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBoolInputVal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputValueType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntInputVal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeStateVal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStringInputVal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeIntStateVal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariable(uint8,bool)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariable(uint8,int256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEdge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeToOutput",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBoolInputVal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputValueType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntInputVal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeStateVal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStringInputVal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNodeIntStateVal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariable(uint8,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariable(uint8,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEdge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeToOutput",
    data: BytesLike
  ): Result;

  events: {
    "BoolVariableUpdated(address,uint8,bool)": EventFragment;
    "IntVariableUpdated(address,uint8,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoolVariableUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntVariableUpdated"): EventFragment;
}

export interface BoolVariableUpdatedEventObject {
  executor: string;
  _variableId: number;
  value: boolean;
}
export type BoolVariableUpdatedEvent = TypedEvent<
  [string, number, boolean],
  BoolVariableUpdatedEventObject
>;

export type BoolVariableUpdatedEventFilter =
  TypedEventFilter<BoolVariableUpdatedEvent>;

export interface IntVariableUpdatedEventObject {
  executor: string;
  _variableId: number;
  value: BigNumber;
}
export type IntVariableUpdatedEvent = TypedEvent<
  [string, number, BigNumber],
  IntVariableUpdatedEventObject
>;

export type IntVariableUpdatedEventFilter =
  TypedEventFilter<IntVariableUpdatedEvent>;

export interface BehaviorGraph extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BehaviorGraphInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBoolInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getInputValueType(
      _nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getIntInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNodeStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStringInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    invoke(
      _invocationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNodeIntStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setVariable(uint8,bool)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setVariable(uint8,int256)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerEdge(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writeToOutput(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getBoolInputVal(
    _nodeId: PromiseOrValue<BigNumberish>,
    _socketName: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getInputValueType(
    _nodeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getIntInputVal(
    _nodeId: PromiseOrValue<BigNumberish>,
    _socketName: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNodeStateVal(
    _nodeId: PromiseOrValue<BigNumberish>,
    _stateVar: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStringInputVal(
    _nodeId: PromiseOrValue<BigNumberish>,
    _socketName: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  invoke(
    _invocationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNodeIntStateVal(
    _nodeId: PromiseOrValue<BigNumberish>,
    _stateVar: PromiseOrValue<string>,
    val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setVariable(uint8,bool)"(
    variableId: PromiseOrValue<BigNumberish>,
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setVariable(uint8,int256)"(
    variableId: PromiseOrValue<BigNumberish>,
    val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerEdge(
    _nodeId: PromiseOrValue<BigNumberish>,
    _socketIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writeToOutput(
    _nodeId: PromiseOrValue<BigNumberish>,
    _socketId: PromiseOrValue<BigNumberish>,
    val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBoolInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getInputValueType(
      _nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getIntInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStringInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    invoke(
      _invocationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GraphUpdateStructOutput[]>;

    setNodeIntStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVariable(uint8,bool)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVariable(uint8,int256)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerEdge(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GraphUpdateStructOutput[]>;

    writeToOutput(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoolVariableUpdated(address,uint8,bool)"(
      executor?: null,
      _variableId?: null,
      value?: null
    ): BoolVariableUpdatedEventFilter;
    BoolVariableUpdated(
      executor?: null,
      _variableId?: null,
      value?: null
    ): BoolVariableUpdatedEventFilter;

    "IntVariableUpdated(address,uint8,int256)"(
      executor?: null,
      _variableId?: null,
      value?: null
    ): IntVariableUpdatedEventFilter;
    IntVariableUpdated(
      executor?: null,
      _variableId?: null,
      value?: null
    ): IntVariableUpdatedEventFilter;
  };

  estimateGas: {
    getBoolInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInputValueType(
      _nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStringInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoke(
      _invocationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNodeIntStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setVariable(uint8,bool)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setVariable(uint8,int256)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerEdge(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writeToOutput(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBoolInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputValueType(
      _nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStringInputVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketName: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoke(
      _invocationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNodeIntStateVal(
      _nodeId: PromiseOrValue<BigNumberish>,
      _stateVar: PromiseOrValue<string>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setVariable(uint8,bool)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setVariable(uint8,int256)"(
      variableId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerEdge(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writeToOutput(
      _nodeId: PromiseOrValue<BigNumberish>,
      _socketId: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
